/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => AnnotationPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  defaultColor: "hsla(60, 75%, 90%, 0.5)"
};
var AnnotationPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.externalPopovers = new Map();
      yield this.loadSettings();
      this.registerMarkdownPostProcessor((element, context) => {
        const popoverDefs = element.querySelectorAll('[id^="pop-"]');
        popoverDefs.forEach((def) => {
          const id = def.id;
          this.externalPopovers.set(id, def.cloneNode(true));
          def.remove();
        });
        const walker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT, null);
        const nodesToProcess = [];
        while (walker.nextNode()) {
          nodesToProcess.push(walker.currentNode);
        }
        nodesToProcess.forEach((node) => {
          const text = node.textContent || "";
          const regex = /\[\[(.*?)\]\{(.*?)\}\]/g;
          let match;
          let lastIndex = 0;
          const fragments = [];
          while ((match = regex.exec(text)) !== null) {
            if (match.index > lastIndex) {
              fragments.push(document.createTextNode(text.slice(lastIndex, match.index)));
            }
            const [highlightedText, annotations2] = [match[1], match[2]];
            const container = this.createAnnotationContainer(highlightedText, annotations2.split("|"));
            fragments.push(container);
            lastIndex = regex.lastIndex;
          }
          if (lastIndex < text.length) {
            fragments.push(document.createTextNode(text.slice(lastIndex)));
          }
          if (fragments.length > 0) {
            const parent = node.parentNode;
            fragments.forEach((fragment) => {
              parent == null ? void 0 : parent.insertBefore(fragment, node);
            });
            parent == null ? void 0 : parent.removeChild(node);
          }
        });
        const annotations = element.querySelectorAll(".annotation");
        annotations.forEach((annotation) => {
          const container = this.createAnnotationContainer(annotation.textContent || "", [annotation.getAttribute("data-annotation") || ""]);
          annotation.replaceWith(container);
        });
      });
    });
  }
  getRandomPastelColor() {
    const hue = Math.random() * 360;
    const saturation = 75 + Math.random() * 15;
    const lightness = 80 + Math.random() * 10;
    const alpha = 0.3;
    return `hsla(${hue}, ${saturation}%, ${lightness}%, ${alpha})`;
  }
  createAnnotationContainer(text, annotations) {
    const container = document.createElement("span");
    container.className = "annotation-container";
    container.style.backgroundColor = annotations.length > 1 ? this.getRandomPastelColor() : this.settings.defaultColor;
    container.textContent = text;
    const popoversContainer = document.createElement("div");
    popoversContainer.className = "popovers-container";
    annotations.forEach((annotation) => {
      const popover = document.createElement("div");
      popover.className = "popover";
      if (annotation.startsWith("#")) {
        const popoverId = annotation.substring(1);
        const externalPopover = this.externalPopovers.get(popoverId) || document.getElementById(popoverId);
        if (externalPopover) {
          const popoverContent = externalPopover.cloneNode(true);
          popover.innerHTML = popoverContent.innerHTML;
        } else {
          popover.textContent = annotation;
        }
      } else {
        popover.textContent = annotation;
      }
      popoversContainer.appendChild(popover);
    });
    container.appendChild(popoversContainer);
    return container;
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
